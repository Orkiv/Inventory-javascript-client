/**
 * InventoryAPI
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InventoryClient);
  }
}(this, function(expect, InventoryClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InventoryClient.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('allGet', function() {
      it('should call allGet successfully', function(done) {
        //uncomment below and update the code to test allGet
        //instance.allGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoriesDelete', function() {
      it('should call categoriesDelete successfully', function(done) {
        //uncomment below and update the code to test categoriesDelete
        //instance.categoriesDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoriesPost', function() {
      it('should call categoriesPost successfully', function(done) {
        //uncomment below and update the code to test categoriesPost
        //instance.categoriesPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('categoriesPut', function() {
      it('should call categoriesPut successfully', function(done) {
        //uncomment below and update the code to test categoriesPut
        //instance.categoriesPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemAddPost', function() {
      it('should call itemAddPost successfully', function(done) {
        //uncomment below and update the code to test itemAddPost
        //instance.itemAddPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemAddbulkPost', function() {
      it('should call itemAddbulkPost successfully', function(done) {
        //uncomment below and update the code to test itemAddbulkPost
        //instance.itemAddbulkPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemDelete', function() {
      it('should call itemDelete successfully', function(done) {
        //uncomment below and update the code to test itemDelete
        //instance.itemDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemPut', function() {
      it('should call itemPut successfully', function(done) {
        //uncomment below and update the code to test itemPut
        //instance.itemPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemsCountPost', function() {
      it('should call itemsCountPost successfully', function(done) {
        //uncomment below and update the code to test itemsCountPost
        //instance.itemsCountPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemsPost', function() {
      it('should call itemsPost successfully', function(done) {
        //uncomment below and update the code to test itemsPost
        //instance.itemsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('itemsallfieldsPost', function() {
      it('should call itemsallfieldsPost successfully', function(done) {
        //uncomment below and update the code to test itemsallfieldsPost
        //instance.itemsallfieldsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ordersPost', function() {
      it('should call ordersPost successfully', function(done) {
        //uncomment below and update the code to test ordersPost
        //instance.ordersPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryPost', function() {
      it('should call queryPost successfully', function(done) {
        //uncomment below and update the code to test queryPost
        //instance.queryPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryallfieldsPost', function() {
      it('should call queryallfieldsPost successfully', function(done) {
        //uncomment below and update the code to test queryallfieldsPost
        //instance.queryallfieldsPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesDelete', function() {
      it('should call servicesDelete successfully', function(done) {
        //uncomment below and update the code to test servicesDelete
        //instance.servicesDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesGet', function() {
      it('should call servicesGet successfully', function(done) {
        //uncomment below and update the code to test servicesGet
        //instance.servicesGet(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesPost', function() {
      it('should call servicesPost successfully', function(done) {
        //uncomment below and update the code to test servicesPost
        //instance.servicesPost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesPut', function() {
      it('should call servicesPut successfully', function(done) {
        //uncomment below and update the code to test servicesPut
        //instance.servicesPut(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writeDelete', function() {
      it('should call writeDelete successfully', function(done) {
        //uncomment below and update the code to test writeDelete
        //instance.writeDelete(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('writePost', function() {
      it('should call writePost successfully', function(done) {
        //uncomment below and update the code to test writePost
        //instance.writePost(pet, function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
