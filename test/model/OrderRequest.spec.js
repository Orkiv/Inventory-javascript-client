/**
 * InventoryAPI
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.InventoryClient);
  }
}(this, function(expect, InventoryClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new InventoryClient.OrderRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OrderRequest', function() {
    it('should create an instance of OrderRequest', function() {
      // uncomment below and update the code to test OrderRequest
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be.a(InventoryClient.OrderRequest);
    });

    it('should have the property orderId (base name: "order_id")', function() {
      // uncomment below and update the code to test the property orderId
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoEmail (base name: "info_email")', function() {
      // uncomment below and update the code to test the property infoEmail
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoFirst (base name: "info_first")', function() {
      // uncomment below and update the code to test the property infoFirst
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoLast (base name: "info_last")', function() {
      // uncomment below and update the code to test the property infoLast
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property shipset (base name: "shipset")', function() {
      // uncomment below and update the code to test the property shipset
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoAdr1 (base name: "info_adr1")', function() {
      // uncomment below and update the code to test the property infoAdr1
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoAdr2 (base name: "info_adr2")', function() {
      // uncomment below and update the code to test the property infoAdr2
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoCty (base name: "info_cty")', function() {
      // uncomment below and update the code to test the property infoCty
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoZip (base name: "info_zip")', function() {
      // uncomment below and update the code to test the property infoZip
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoSadr1 (base name: "info_sadr1")', function() {
      // uncomment below and update the code to test the property infoSadr1
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoSadr2 (base name: "info_sadr2")', function() {
      // uncomment below and update the code to test the property infoSadr2
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoScty (base name: "info_scty")', function() {
      // uncomment below and update the code to test the property infoScty
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property infoSzip (base name: "info_szip")', function() {
      // uncomment below and update the code to test the property infoSzip
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property sstate (base name: "sstate")', function() {
      // uncomment below and update the code to test the property sstate
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property taxAmount (base name: "tax_amount")', function() {
      // uncomment below and update the code to test the property taxAmount
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property shippingAmount (base name: "shipping_amount")', function() {
      // uncomment below and update the code to test the property shippingAmount
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

    it('should have the property amountTotal (base name: "amount_total")', function() {
      // uncomment below and update the code to test the property amountTotal
      //var instane = new InventoryClient.OrderRequest();
      //expect(instance).to.be();
    });

  });

}));
