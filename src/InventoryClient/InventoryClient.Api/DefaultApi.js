/**
 * InventoryAPI
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['InventoryClient/ApiClient', 'InventoryClient/InventoryClient.model/InventoryGroup', 'InventoryClient/InventoryClient.model/Error', 'InventoryClient/InventoryClient.model/Response', 'InventoryClient/InventoryClient.model/Dictionary', 'InventoryClient/InventoryClient.model/Category', 'InventoryClient/InventoryClient.model/Item', 'InventoryClient/InventoryClient.model/Order', 'InventoryClient/InventoryClient.model/Service', 'InventoryClient/InventoryClient.model/EventRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../InventoryClient.model/InventoryGroup'), require('../InventoryClient.model/Error'), require('../InventoryClient.model/Response'), require('../InventoryClient.model/Dictionary'), require('../InventoryClient.model/Category'), require('../InventoryClient.model/Item'), require('../InventoryClient.model/Order'), require('../InventoryClient.model/Service'), require('../InventoryClient.model/EventRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.InventoryClient) {
      root.InventoryClient = {};
    }
    root.InventoryClient.DefaultApi = factory(root.InventoryClient.ApiClient, root.InventoryClient.InventoryGroup, root.InventoryClient.Error, root.InventoryClient.Response, root.InventoryClient.Dictionary, root.InventoryClient.Category, root.InventoryClient.Item, root.InventoryClient.Order, root.InventoryClient.Service, root.InventoryClient.EventRequest);
  }
}(this, function(ApiClient, InventoryGroup, Error, Response, Dictionary, Category, Item, Order, Service, EventRequest) {
  'use strict';

  /**
   * Default service.
   * @module InventoryClient/InventoryClient.Api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:InventoryClient/InventoryClient.Api/DefaultApi
   * @class
   * @param {module:InventoryClient/ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:InventoryClient/ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the allGet operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~allGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/InventoryGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~allGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/InventoryGroup>}
     */
    this.allGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InventoryGroup];

      return this.apiClient.callApi(
        '/all/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesDelete operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id Id of category to remove
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.categoriesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling categoriesDelete";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/categories/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Category>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Category to query against system
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Category>}
     */
    this.categoriesPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Category];

      return this.apiClient.callApi(
        '/categories/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesPut operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If no ID is specified a new category will be created!
     * @param {String} id category id to update.
     * @param {module:InventoryClient/InventoryClient.model/Category} category New category information.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~categoriesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Category}
     */
    this.categoriesPut = function(id, category, callback) {
      var postBody = category;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling categoriesPut";
      }

      // verify the required parameter 'category' is set
      if (category == undefined || category == null) {
        throw "Missing the required parameter 'category' when calling categoriesPut";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/categories/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemAddPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemAddPostCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Item} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:InventoryClient/InventoryClient.model/Item} item Item to create.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Item}
     */
    this.itemAddPost = function(item, callback) {
      var postBody = item;

      // verify the required parameter 'item' is set
      if (item == undefined || item == null) {
        throw "Missing the required parameter 'item' when calling itemAddPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Item;

      return this.apiClient.callApi(
        '/item/add/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemAddbulkPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemAddbulkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Array.<module:InventoryClient/InventoryClient.model/Item>} items Items to create.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemAddbulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.itemAddbulkPost = function(items, callback) {
      var postBody = items;

      // verify the required parameter 'items' is set
      if (items == undefined || items == null) {
        throw "Missing the required parameter 'items' when calling itemAddbulkPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/item/addbulk/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemDelete operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id item id to remove
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.itemDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling itemDelete";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/item/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemPut operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemPutCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id item id to update.
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} item New item information.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.itemPut = function(id, item, callback) {
      var postBody = item;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling itemPut";
      }

      // verify the required parameter 'item' is set
      if (item == undefined || item == null) {
        throw "Missing the required parameter 'item' when calling itemPut";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/item/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemsCountPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemsCountPostCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Item to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemsCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'Number'}
     */
    this.itemsCountPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/items/count/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemsPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Item>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Item to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Item>}
     */
    this.itemsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Item];

      return this.apiClient.callApi(
        '/items/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the itemsallfieldsPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~itemsallfieldsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Dictionary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Item to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~itemsallfieldsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Dictionary>}
     */
    this.itemsallfieldsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Dictionary];

      return this.apiClient.callApi(
        '/items/?allfields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~ordersPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Order to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~ordersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Order>}
     */
    this.ordersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/orders/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~queryPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Item>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page index.
     * @param {String} opts.categoryid Get items under specified category id.
     * @param {String} opts.sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
     * @param {String} opts.search Performs a regex pattern match against the items within your account
     * @param {Number} opts.minprice Min price in hundreds.
     * @param {Number} opts.maxprice Max price in hudreds.
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Custom parameters to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~queryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Item>}
     */
    this.queryPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'categoryid': opts['categoryid'],
        'sort': opts['sort'],
        'search': opts['search'],
        'minprice': opts['minprice'],
        'maxprice': opts['maxprice']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Item];

      return this.apiClient.callApi(
        '/query/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queryallfieldsPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~queryallfieldsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Dictionary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page index.
     * @param {String} opts.categoryid Get items under specified category id.
     * @param {String} opts.sort Comma delimited Sort string. ie ; +ordprice. Please use number based fields only
     * @param {String} opts.search Performs a regex pattern match against the items within your account
     * @param {Number} opts.minprice Min price in hundreds.
     * @param {Number} opts.maxprice Max price in hudreds.
     * @param {module:InventoryClient/InventoryClient.model/Dictionary} opts.query Custom parameters to query against system.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~queryallfieldsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Dictionary>}
     */
    this.queryallfieldsPost = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['query'];


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'categoryid': opts['categoryid'],
        'sort': opts['sort'],
        'search': opts['search'],
        'minprice': opts['minprice'],
        'maxprice': opts['maxprice']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Dictionary];

      return this.apiClient.callApi(
        '/query/?allfields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDelete operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~servicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id ID of the service to update
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~servicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.servicesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling servicesDelete";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/services/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGet operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~servicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:InventoryClient/InventoryClient.model/Service>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~servicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:InventoryClient/InventoryClient.model/Service>}
     */
    this.servicesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Service];

      return this.apiClient.callApi(
        '/services/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesPost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~servicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Service} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:InventoryClient/InventoryClient.model/Service} service Service to create.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~servicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Service}
     */
    this.servicesPost = function(service, callback) {
      var postBody = service;

      // verify the required parameter 'service' is set
      if (service == undefined || service == null) {
        throw "Missing the required parameter 'service' when calling servicesPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Service;

      return this.apiClient.callApi(
        '/services/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesPut operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~servicesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id ID of the service to update
     * @param {module:InventoryClient/InventoryClient.model/Service} service New service data to set.
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~servicesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.servicesPut = function(id, service, callback) {
      var postBody = service;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling servicesPut";
      }

      // verify the required parameter 'service' is set
      if (service == undefined || service == null) {
        throw "Missing the required parameter 'service' when calling servicesPut";
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/services/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the writeDelete operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~writeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Will delete event attached to this serviceid
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~writeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.writeDelete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/write/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the writePost operation.
     * @callback module:InventoryClient/InventoryClient.Api/DefaultApi~writePostCallback
     * @param {String} error Error message, if any.
     * @param {module:InventoryClient/InventoryClient.model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Will ovveride the current event of the specified service.
     * @param {module:InventoryClient/InventoryClient.model/EventRequest} eventRequest Event to upload
     * @param {module:InventoryClient/InventoryClient.Api/DefaultApi~writePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:InventoryClient/InventoryClient.model/Response}
     */
    this.writePost = function(eventRequest, callback) {
      var postBody = eventRequest;

      // verify the required parameter 'eventRequest' is set
      if (eventRequest == undefined || eventRequest == null) {
        throw "Missing the required parameter 'eventRequest' when calling writePost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKey', 'AccountID'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Response;

      return this.apiClient.callApi(
        '/write/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
